# ============
# 1. CONFIGURING KUBELET CGROUP DRIVER
# 2. INITIALIZE K8S CLUSTER
# 3. CHECK
# 4. INSTALL & CONFIGURE CNI PLUGIN ! not finished
# 5. INSTALL calicoctl ! not finished
# ============

---
- name: Setup Kubernetes Cluster control plane
  hosts: control_plane
  become: yes
  vars_files:
    - secret.yml
    - variables.yml

  tasks:
# 1. CONFIGURING KUBELET CGROUP DRIVER
    - name: Create kubeadm-config.yaml
      file:
        path: /home/{{ user }}/kubeadm-config.yaml
        state: touch
        mode: '0755'

    - name: Write content into kubeadm-config.yaml
      lineinfile:
        path: /home/{{ user }}/kubeadm-config.yaml
        state: present
        create: yes
        line: |
          kind: ClusterConfiguration
          apiVersion: kubeadm.k8s.io/v1beta3
          kubernetesVersion: v1.28.11
          networking:
            serviceSubnet: "10.96.0.0/16"
            podSubnet: "10.244.0.0/24"
          ---
          kind: KubeletConfiguration
          apiVersion: kubelet.config.k8s.io/v1beta1
          cgroupDriver: systemd
    
    - name: Apply kubeadm-config.yaml
      shell: kubeadm init --config kubeadm-config.yaml
      become: yes
      register: kubeadm_init_output
    
    - name: Wait until kubeadm init is finished
      wait_for:
        timeout: 60
    
    - name: Output kubeadm init output
      debug:
        msg: "{{ kubeadm_init_output.stdout_lines }}"

# # 2. INITIALIZE K8S CLUSTER
    - name : Copy Kubernetes config file as root
      shell: mkdir -p $HOME/.kube && sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config && sudo chown $(id -u):$(id -g) $HOME/.kube/config

    - name: Export kubeconfig location as environment
      shell: export KUBECONFIG=/etc/kubernetes/admin.conf

    - name: Mkdir .kube directory for user
      shell: mkdir -p /home/{{ user }}/.kube 
      become_user: "{{ user }}"
      
    - name: Copy Kubernetes config file for user
      copy: 
        src: /etc/kubernetes/admin.conf 
        dest: /home/{{ user }}/.kube/config
        mode: '0644'        
        remote_src: true
      become: true
      become_user: root
    
    # - name: Chown Kubernetes config file for user
    #   shell: sudo chown $(id -u):$(id -g) $HOME/.kube/config
    #   become_user: "{{ user }}"
    
    - name: Fetch Kubernetes config file from control plane to Ansible controller
      fetch:
        src: /etc/kubernetes/admin.conf
        dest: /home/{{ user }}/.kube/config
        flat: yes
      become: true
      become_user: root

# 3. CHECK
    - name: Use kubectl to check nodes
      shell: kubectl get nodes
      register: nodes

    - name: Output nodes 
      debug:
        msg: "{{ nodes.stdout_lines }}"

    - name: Use kubectl to check all system pods
      shell: kubectl get pods -n kube-system
      register: pods

    - name: Output pods
      debug:
        msg: "{{ pods.stdout_lines }}"